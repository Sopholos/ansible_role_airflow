---

- name: Airflow | Ensure Airflow group
  group:
    name: "{{ airflow_group }}"

- name: Airflow | Ensure Airflow user
  user:
    name: "{{ airflow_user }}"
    group: "{{ airflow_group }}"
    system: yes
    shell:  /usr/sbin/nologin
    # shell: /bin/bash
    createhome: yes

- name: Airflow | Ensure airflow skeleton paths
  file:
    path: "{{ item }}"
    owner: "{{ airflow_user }}"
    group: "{{ airflow_group }}"
    state: directory
  with_items: "{{ airflow_skeleton_paths }}"

- name: Airflow | Installing dependencies
  apt:
    pkg: "{{ airflow_required_libs }}"
    state: present
    update_cache: true

# See https://airflow.apache.org/docs/apache-airflow/stable/installation.html#installation-tools
- name: Airflow | Install pip 20.2.4 version
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: pip
    version: 20.2.4

- name: Airflow | Installing Python pip dependencies
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: "{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
  with_items: "{{ airflow_required_python_packages }}"

- name: Airflow | Installing proper Celery version
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: celery
    version: "{{ celery_version }}"
  when: airflow_executor == "CeleryExecutor"

- name: Airflow | Installing extra Celery packages
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: celery[{{ item }}]
    version: "{{ celery_version }}"
  with_items: "{{ celery_extra_packages }}"
  when: airflow_executor == "CeleryExecutor" and celery_extra_packages

- name: Airflow | Set AIRFLOW_HOME environment variable in "{{ airflow_home }}"
  lineinfile:
    path: /etc/environment
    line: "AIRFLOW_HOME={{ airflow_home }}"

- name: Airflow | Installing Airflow
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: "{{ airflow_package }}[{{ airflow_bundle_package | default(omit) }}]"
    version: "{{ airflow_version }}"
    state: present
    extra_args: --no-cache-dir
  register: airflow_install
  environment:
    SLUGIFY_USES_TEXT_UNIDECODE: "yes"

- name: Airflow | Installing Airflow Extra Packages (prior to Ansible 2.7)
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: "{{ airflow_package }}[{{ item }}]=={{ airflow_version }}"
  with_items: "{{ airflow_extra_packages }}"
  when:
    - airflow_extra_packages is defined
    - not airflow_bundle_package
    - ansible_version.full is version_compare('2.7', '<')

- name: Airflow | Installing Airflow Extra Packages
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: "apache-airflow[{{ airflow_extra_packages | join(', ') }}]"
    version: "{{ airflow_version }}"
  when:
    - airflow_extra_packages is defined
    - not airflow_bundle_package
    - ansible_version.full is version_compare('2.7', '>=')

- name: Airflow | Installing DAGs dependencies
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: "{{ item.name }}"
    version: "{{ item.version }}"
  with_items: "{{ dags_dependencies }}"
  when: dags_dependencies
  notify:
    - restart airflow-webserver
    - restart airflow-scheduler
    - restart airflow-worker
    - restart airflow-flower

- name: Airflow | Copy Environment File
  template:
    src: airflow-environment-file.j2
    dest: "{{ airflow_environment_file_folder }}/airflow"
    mode: 0644
    owner: "{{ airflow_user }}"
    group: "{{ airflow_group }}"

- name: Airflow | Copy Daemon scripts
  template:
    src: "{{ item.value.path }}"
    dest: "/lib/systemd/system/{{ item.key }}.service"
    mode: 0644
  notify: restart {{ item.key }}
  with_dict: "{{ airflow_services }}"
  when: item.value.enabled
